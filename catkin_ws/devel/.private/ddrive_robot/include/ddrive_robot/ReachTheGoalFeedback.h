// Generated by gencpp from file ddrive_robot/ReachTheGoalFeedback.msg
// DO NOT EDIT!


#ifndef DDRIVE_ROBOT_MESSAGE_REACHTHEGOALFEEDBACK_H
#define DDRIVE_ROBOT_MESSAGE_REACHTHEGOALFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ddrive_robot
{
template <class ContainerAllocator>
struct ReachTheGoalFeedback_
{
  typedef ReachTheGoalFeedback_<ContainerAllocator> Type;

  ReachTheGoalFeedback_()
    : x_status(0.0)
    , y_status(0.0)  {
    }
  ReachTheGoalFeedback_(const ContainerAllocator& _alloc)
    : x_status(0.0)
    , y_status(0.0)  {
  (void)_alloc;
    }



   typedef float _x_status_type;
  _x_status_type x_status;

   typedef float _y_status_type;
  _y_status_type y_status;





  typedef boost::shared_ptr< ::ddrive_robot::ReachTheGoalFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ddrive_robot::ReachTheGoalFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct ReachTheGoalFeedback_

typedef ::ddrive_robot::ReachTheGoalFeedback_<std::allocator<void> > ReachTheGoalFeedback;

typedef boost::shared_ptr< ::ddrive_robot::ReachTheGoalFeedback > ReachTheGoalFeedbackPtr;
typedef boost::shared_ptr< ::ddrive_robot::ReachTheGoalFeedback const> ReachTheGoalFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ddrive_robot::ReachTheGoalFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ddrive_robot::ReachTheGoalFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ddrive_robot::ReachTheGoalFeedback_<ContainerAllocator1> & lhs, const ::ddrive_robot::ReachTheGoalFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.x_status == rhs.x_status &&
    lhs.y_status == rhs.y_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ddrive_robot::ReachTheGoalFeedback_<ContainerAllocator1> & lhs, const ::ddrive_robot::ReachTheGoalFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ddrive_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ddrive_robot::ReachTheGoalFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ddrive_robot::ReachTheGoalFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ddrive_robot::ReachTheGoalFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ddrive_robot::ReachTheGoalFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ddrive_robot::ReachTheGoalFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ddrive_robot::ReachTheGoalFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ddrive_robot::ReachTheGoalFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a25804fcdc19934866f12b8ef1c3cc33";
  }

  static const char* value(const ::ddrive_robot::ReachTheGoalFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa25804fcdc199348ULL;
  static const uint64_t static_value2 = 0x66f12b8ef1c3cc33ULL;
};

template<class ContainerAllocator>
struct DataType< ::ddrive_robot::ReachTheGoalFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ddrive_robot/ReachTheGoalFeedback";
  }

  static const char* value(const ::ddrive_robot::ReachTheGoalFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ddrive_robot::ReachTheGoalFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#Feedback\n"
"float32 x_status\n"
"float32 y_status\n"
;
  }

  static const char* value(const ::ddrive_robot::ReachTheGoalFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ddrive_robot::ReachTheGoalFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_status);
      stream.next(m.y_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReachTheGoalFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ddrive_robot::ReachTheGoalFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ddrive_robot::ReachTheGoalFeedback_<ContainerAllocator>& v)
  {
    s << indent << "x_status: ";
    Printer<float>::stream(s, indent + "  ", v.x_status);
    s << indent << "y_status: ";
    Printer<float>::stream(s, indent + "  ", v.y_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DDRIVE_ROBOT_MESSAGE_REACHTHEGOALFEEDBACK_H
